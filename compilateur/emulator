#!/usr/bin/python3


class VM:
    _registers = ["RS", "R1", "R2", "R3"]

    def __init__(self, debug=False, csv_file="", arch=8):
        self.arch = arch
        self.datas = bytearray()
        self.pc = 0
        self.instructions = list()
        self.fetched = ("", [])
        self.debug = debug
        self.csv_file = csv_file
        self.register = bytearray()

    def load(self, instructions: list[tuple[str, list[str]]]):
        self.instructions = instructions.copy()

    def fetch(self) -> bool:
        if self.pc < len(self.instructions):
            self.fetched = self.instructions[self.pc]
            return True
        else:
            self.fetched = ("", [])
            return False

    def execute(self):
        def get_name() -> str:
            return self.fetched[1][0]

        # def get_arg(i) -> int:
        #     arg = self.fetched[1][i]
        #     return self.datas[int(arg[1:], 16)] if arg[0] == "@" else int(arg)

        def get_int(i) -> int:
            arg = self.fetched[1][i]
            return int(arg[1:], 16)

        def r_read(i) -> int:
            arg = self.fetched[1][i]
            return self.register[self._registers.index(arg)]

        # def set_ram(i, value: int):
        #     arg = self.fetched[1][i]
        #     self.datas[int(arg[1:], 16)] = (value & 0xFF)

        def r_write(i, value: int):
            arg = self.fetched[1][i]
            self.register[self._registers.index(arg)] = (value & 0xFF)

        def neg(value: int) -> int:
            return 0x100 - value

        if self.fetched[1]:
            match get_name():
                # Instructions données par le sujet
                case "ADD":
                    r_write(1, (r_read(2) + r_read(3)))
                case "MUL":
                    r_write(1, (r_read(2) * r_read(3)))
                case "SUB":
                    r_write(1, (r_read(2) + neg(r_read(3))))
                case "DIV":
                    r_write(1, (r_read(2) // r_read(3)))
                case "COP":
                    r_write(1, r_read(2))
                case "AFC":
                    r_write(1, get_int(2))
                case "JMP":
                    self.pc = r_read(1)
                case "JMF":
                    if r_read(1) == 0:
                        self.pc = r_read(2)
                case "INF":
                    r_write(1, (r_read(2) < r_read(3)))
                case "SUP":
                    r_write(1, (r_read(2) > r_read(3)))
                case "EQU":
                    r_write(1, (r_read(2) == r_read(3)))
                case "PRI":
                    print(r_read(1))
                # Instruction technique
                case "LOD":
                    r_write(1, self.datas[r_read(2)])
                case "STR":
                    self.datas[r_read(2)] = r_read(1)
                # Instructions ajoutées (arithmétiques)
                case "NEG":
                    r_write(1, neg(r_read(2)))
                case "MOD":
                    r_write(1, (r_read(2) % r_read(3)))
                # Instructions ajoutées (bit à bit)
                case "AND":
                    r_write(1, (r_read(2) & r_read(3)))
                case "OR":
                    r_write(1, (r_read(2) | r_read(3)))
                case "XOR":
                    r_write(1, (r_read(2) ^ r_read(3)))
                case "NOT":
                    r_write(1, ~r_read(2))
                case _:
                    raise NotImplementedError(f"Instruction {self.fetched} not implemented")
        self.pc += 1

    def log_state(self):
        if self.debug:
            print(f"{self.pc:4d} - {self.fetched[0]}")

    def csv_header(self):
        if self.csv_file:
            with open(self.csv_file, 'w') as f:
                print(f"FETCH;{';'.join(self._registers)};{bytes(range(1 << self.arch)).hex(';').upper()}", file=f)

    def csv_datas(self):
        if self.csv_file:
            with open(self.csv_file, 'a') as f:
                print(f"{self.fetched[0]};{';'.join(map(str, self.register))};{';'.join(map(str, self.datas))}", file=f)

    def run(self, max_iter=255):
        self.pc = 0
        self.datas = bytearray(1 << self.arch)
        self.register = bytearray(len(self._registers))
        self.csv_header()
        self.csv_datas()
        while self.fetch():
            if max_iter == 0:
                raise RecursionError("Maximum number of instruction reached")
            self.execute()
            max_iter -= 1
            self.log_state()
            self.csv_datas()


def parse_file(file_path: str) -> list[tuple[str, list[str]]]:
    with open(file_path, 'r') as f:
        lines = [
            (i[:-1], j[1].split()) for i, j in (
                (i, i.split('#')) for i in (
                    (i.split('//')[0]) for i in f.readlines())) if len(j) == 2]
    return lines


if __name__ == "__main__":
    from argparse import ArgumentParser

    parser = ArgumentParser(add_help=False, description="A simple virtual machine to run Dragon programs.")
    parser.add_argument("-h", "--help", action="help", help="Show this help message and exit")
    parser.add_argument("file", type=str, help="The file to run")
    parser.add_argument("-i", "--max-iter", type=int, default=255,
                        help="Maximum number of instruction can be executed, prevent infinite loop. (default: 255)")
    parser.add_argument("-d", "--debug", action="store_true",
                        help="Enable debug mode, it will print the state of the VM between each execution.")
    parser.add_argument("-r", "--csv-ram", default="",
                        help="CSV file to save the RAM state at the end of the execution.")
    args = parser.parse_args()

    vm = VM(args.debug, args.csv_ram)
    vm.load(parse_file(args.file))
    vm.run(args.max_iter)
